# -*- coding: utf-8 -*-
"""
Created on Fri Mar 13 21:03:10 2020

@author: yingl WANG
"""


from scipy.integrate import odeint
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import root,fsolve
#plt.rc('text', usetex=True) #使用latex
## 使用scipy.optimize模块的root和fsolve函数进行数值求

node_num=[34642 ,	34884,	35186,	35543,	35689,	36269,	36704,	37223,	37611,	37836,	37756,	37676,
              38104,	38327	,38328	,38478,	38563,	38689	,38836	,39017	,39157,	38847,	37356,	37864,	38691,	
              39661,	41119,	41645,	42078,	43563,	44431,	45464,	46986,	47635,	47955,	48674,	49531,	
              50454	,51134,	51988,	52838,	53678,	54157,	54998,	56202,	56597	,57415,	57507,	61316,
              61547,	62553,	63714,	64697,	66046,	66453,	68057,	69013,	69514,	70016	,71106,	71796,	
              72597,	74054]	

edge_num=[33405	,33723,	34161,	34502,	34643	,35034,	35448,	36089,	36406,	36520,	36389,	36318	,
              36734,	36987,	36986,	37038,	37046,	37138,	37233,	37394,	37584,	37289,	35928,	36572,	
              37501,	38564,	40199,	40691,	41041,	42527,	43567,	44602,	46189,	46769,	46911,	47516,	
              48571,	49588,	50224,	51213,	51982,	52807,	53197,	53830,	54907,	55190	,55797,	55626,	
              60279,	60519,	61474,	62557,	63446,	64745,	65035,	66783,	67685	,68063.5,	68442,	69842,	
              70588	,71486,	72959	]
density=[0.0000278367,	0.0000277132,	0.0000275933,	0.0000273117,	0.0000271994,	0.0000266336,	0.0000263134,	
0.0000260474,	0.0000257368,	0.0000255113,	0.0000255276,	0.0000255861,	0.0000253010,	0.0000251797,	
0.0000251777,	0.0000250169,	0.0000249121,	0.0000248116,	0.0000246871,	0.0000245644,	0.0000245129,	
0.0000247102,	0.0000257468,	0.0000255098,	0.0000250515,	0.0000245169,	0.0000237761,	0.0000234630	,
0.0000231802,	0.0000224099,	0.0000220696,	0.0000215789,	0.0000209224,	0.0000206117,	0.0000203993,	
0.0000200565,	0.0000197985,	0.0000194802,	0.0000192088,	0.0000189488,	0.0000186195,	0.0000183277,	
0.0000181379,	0.0000177967,	0.0000173833,	0.0000172298,0.0000169265,	0.0000168207,	0.0000160334,
0.0000159766,	0.0000157109,	0.0000154104,	0.0000151580,	0.0000148429,0.0000147273,	0.0000144187,	
0.0000142114,	0.0000140865,	0.0000139616,	0.0000138137,	0.0000136942,	0.0000135641,	0.0000133042]


reciprocity=[0.143691064,	0.144945586,	0.142384591,	0.140745464,	0.141038594,	0.138779471,	
0.138682013,	0.141040206,	0.139647311,	0.140470975,	0.139987359,	0.14075665,	
0.140632656,	0.140211426,	0.139566322,	0.139802365,	0.135561194,	0.136625559,	
0.135739801,	0.135529764,	0.135057471,	0.135214138,	0.137274549,	0.139013453,	
0.139622943,	0.140908619,	0.143585661,	0.144503699,	0.143709949,	0.144566981,	
0.147864209,	0.14766154,	0.150555327,	0.149500738,	0.149474537,	0.148244802,	
0.15008956,	0.149552311,	0.151202612,	0.152656552,	0.151975684,	0.151532941,	
0.152226629,	0.150399406,	0.15083687,	0.151621671,	0.151047547,	0.147017582,	
0.14923937,	0.14868058,	0.147932459,	0.147257701,	0.145793273,	0.144381806,	
0.143614977,	0.142910621,	0.142572209,	0.141462312,	0.140352415,	0.140975344,	
0.140363801,	0.139859553,	0.141284831]

# =============================================================================
# 计算出互保边的总数 m2
#m2_list = list(map(lambda x,y:x*y, reciprocity,edge_num))
# print(m2_list)
# =============================================================================

#reciprocity_num=[4799.99999292, 4887.999996678, 4864.0000131510005, 4855.9999989279995, 4886.000011941999, 4861.999987014, 4915.999996824, 5089.999994334, 5084.000004265999, 5130.000007, 5094.000006651, 5112.0000147, 5165.999985504, 5186.000013462, 5161.999985492, 5177.999994870001, 5021.999992924, 5074.000010142, 5054.000010633, 5067.999995016, 5075.9999900640005, 5041.999991882, 4931.999996472, 5084.000003116001, 5235.999985443, 5433.999983116, 5771.999986539, 5880.000016009, 5898.000016909, 6148.000000987, 6441.999993503, 6586.000007080001, 6953.9999988029995, 6992.000015522, 7012.000005207, 7044.000011832, 7290.000018760001, 7415.999997868, 7593.999985087999, 7817.999997576, 7900.000005688, 8002.0000153870005, 8097.999982913, 8096.0000249800005, 8282.00002109, 8368.000022490001, 8427.999979959, 8178.000016332, 8995.99998423, 8998.00002102, 9093.999984565999, 9212.000001457, 9249.999998758, 9348.00002947, 9340.000029195, 9544.000002243, 9649.999966165, 9628.420072812001, 9605.999987430001, 9845.999975648001, 9907.999984988, 9998.000005758, 10307.999984929]

reciprocity_num=[4800, 4888, 4864, 4856, 4886.000011941999, 4861.999987014, 4915.999996824, 5089.999994334, 5084.000004265999, 5130.000007, 5094.000006651, 5112.0000147, 5165.999985504, 5186.000013462, 5161.999985492, 5177.999994870001, 5021.999992924, 5074.000010142, 5054.000010633, 5067.999995016, 5075.9999900640005, 5041.999991882, 4931.999996472, 5084.000003116001, 5235.999985443, 5433.999983116, 5771.999986539, 5880.000016009, 5898.000016909, 6148.000000987, 6441.999993503, 6586.000007080001, 6953.9999988029995, 6992.000015522, 7012.000005207, 7044.000011832, 7290.000018760001, 7415.999997868, 7593.999985087999, 7817.999997576, 7900.000005688, 8002.0000153870005, 8097.999982913, 8096.0000249800005, 8282.00002109, 8368.000022490001, 8427.999979959, 8178.000016332, 8995.99998423, 8998.00002102, 9093.999984565999, 9212.000001457, 9249.999998758, 9348.00002947, 9340.000029195, 9544.000002243, 9649.999966165, 9628.420072812001, 9605.999987430001, 9845.999975648001, 9907.999984988, 9998.000005758, 10307.999984929]


#m2_list=int(m2_list)
#print (m2_list)

## 3、求解非线性方程组

#f1=m1-n*(n-1)(np.exp(x[0])+np.exp(2*x[0]+2*x[1]))/(1+2*np.exp(x[0])+np.exp(2*x[0]+2*x[1]))
#f2=m2-n*(n-1)(np.exp(2*x[0]+2*x[1]))/(1+2*np.exp(x[0])+np.exp(2*x[0]+2*x[1]))

dense_coefficients=[]
reciprocity_coefficients=[]
   
#
def f(x,i):
    edge=edge_num[i]
    recip=reciprocity_num[i]
    n=node_num[i]
#    f1=n*(n-1)*(np.exp(-x[0])-np.exp(-2*x[0]-2*x[1]))/(1+2*np.exp(-x[0])+np.exp(-2*x[0]-2*x[1]))- edge
#    f2=n*(n-1)*(- np.exp(-2*x[0]-2*x[1]))/(1+2*np.exp(-x[0])+np.exp(-2*x[0]/n-2*x[1]))-recip
    f1=n*(n-1)*(np.exp(x[0])+np.exp(2*x[0]+2*x[1]))- edge*(1+2*np.exp(x[0])+np.exp(2*x[0]+2*x[1]))
    f2=n*(n-1)*(np.exp(2*x[0]+2*x[1]))-recip*(1+2*np.exp(x[0])+np.exp(2*x[0]-2*x[1]))

    return np.array([f1, f2])

for i in range(63):
    print (i+1)
    sol_root = root(f,[1,1], args=(i))
    sol_fsolve = fsolve(f,[1,1], args=(i))
    print(sol_fsolve)
    print(f(sol_fsolve,i))

    dense_coefficients.append (sol_fsolve[0])
    reciprocity_coefficients.append (sol_fsolve[1])
print ('dense_coefficients=', dense_coefficients)
    
print ('reciprocity_coefficients=', reciprocity_coefficients)


#
#def f(x,i):
#
#
#    edge=edge_num[i]
#    recip=reciprocity_num[i]
#    n=node_num[i]
##    f1=n*(n-1)*(- np.exp(-x[0])-np.exp(-2*x[0]-2*x[1]))- edge*(1+2*np.exp(-x[0])+np.exp(-2*x[0]-2*x[1]))
##    f2=n*(n-1)*(- np.exp(-2*x[0]-2*x[1]))-recip*(1+2*np.exp(-x[0])+np.exp(-2*x[0]/n-2*x[1]))
#    f1=n*(n-1)*(np.exp(x[0])+np.exp(2*x[0]+2*x[1]))- edge*(1+2*np.exp(x[0])+np.exp(2*x[0]+2*x[1]))
#    f2=n*(n-1)*(np.exp(2*x[0]+2*x[1]))-recip*(1+2*np.exp(x[0])+np.exp(2*x[0]-2*x[1]))
#
#
##    f1=n*(n-1)*(- x[0]-x[0]**2-x[1]**2)- edge*(1+2*x[0]+(x[0]**2)*(x[1]**2))
##    f2=n*(n-1)*(-(x[0]**2)*(x[1]**2))-recip*edge*(1+2*x[0]+(x[0]**2)*(x[1]**2))
##转换为标准的浮点数列表
#    x0, x1 = x.tolist()
#    return[f1, f2]
#    
#result = fsolve(f, [-0.058944994048737744, 0.23546957619009945])
#print(result)
#print(f(result))


dense_coefficients= [-10.644226175550173, -10.650141136106145, -10.651486377627123, -10.65983498644747, -10.664296703072537, -10.682689960328368, -10.694674635122304, -10.707578141607142, -10.717952622284907, -10.727713513136141, -10.726511195096311, -10.72511676503854, -10.736175984594823, -10.740493263483238, -10.739822452085095, -10.746504177992787, -10.745783282394031, -10.751059399361958, -10.755064216241976, -10.759806363332368, -10.761355705917548, -10.75351962544957, -10.71480890480528, -10.726075885647521, -10.74491323670628, -10.7679813754936, -10.801785710307707, -10.816116355541144, -10.827312550174417, -10.862114842459787, -10.881275579571072, -10.903527243566598, -10.9378249063833, -10.951542316277507, -10.961871021368312, -10.977376712589413, -10.992493065699067, -11.008066465038167, -11.0240407359792, -11.039382135123999, -11.05611115790124, -11.071389002845837, -11.082617200565046, -11.099455343894968, -11.123472684452365, -11.133264078463728, -11.150349289786048, -11.151885279326665, -11.202431202785693, -11.205321767993667, -11.221213346165884, -11.239739024675492, -11.254533898649118, -11.27388973084777, -11.28081202190314, -11.301169159020079, -11.315257562808192, -11.322854335051575, -11.330408374606582, -11.341780764556614, -11.349758943795974, -11.358721127972402, -11.379726207475155]
reciprocity_coefficients= [4.42962794740412, 4.437664866544438, 4.427928909808466, 4.425359178841661, 4.428800907238086, 4.428610599659922, 4.434195137696542, 4.450448374113246, 4.449863036553091, 4.458162817009313, 4.455556038904032, 4.458046455136612, 4.463063293250146, 4.463477055893135, 4.4604608720346555, 4.4647838439292, 4.446561006549318, 4.4537255155315405, 4.451963142219563, 4.453438456763859, 4.452194606511069, 4.448946786558478, 4.43834561430848, 4.451281800027076, 4.463241982377013, 4.480106822747846, 4.507979611060271, 4.518867864336725, 4.521248260919876, 4.54212309800717, 4.56491010130786, 4.57523128333256, 4.603784512959591, 4.606508239156974, 4.611569571663329, 4.614469518728437, 4.629295386382765, 4.6349731868161586, 4.649418771448585, 4.6627316306183495, 4.66845952276572, 4.674378750983828, 4.682685492767301, 4.683990152935128, 4.697708603410847, 4.705661365857133, 4.711968882510711, 4.696847814956049, 4.7309245545135274, 4.730165909670971, 4.73515031641638, 4.741731546503083, 4.743273878955937, 4.747262102934823, 4.747612715936659, 4.7549219730444054, 4.760583434015673, 4.759827385224154, 4.759020042307326, 4.767282941447974, 4.768742531683882, 4.7711309812559834, 4.787532333451353]

#total_coefficients=list(map(lambda x,y:x+y, dense_coefficients,reciprocity_coefficients))
#print (total_coefficients)

total_coefficients = [-6.214598228146054, -6.212476269561707, -6.223557467818656, -6.234475807605809, -6.235495795834451, -6.254079360668446, -6.260479497425762, -6.257129767493896, -6.268089585731816, -6.269550696126828, -6.270955156192279, -6.2670703099019285, -6.273112691344677, -6.277016207590103, -6.279361580050439, -6.2817203340635865, -6.299222275844713, -6.297333883830418, -6.303101074022413, -6.306367906568509, -6.309161099406479, -6.304572838891092, -6.2764632904968, -6.274794085620445, -6.281671254329267, -6.287874552745754, -6.293806099247436, -6.297248491204419, -6.306064289254541, -6.319991744452618, -6.316365478263212, -6.328295960234039, -6.334040393423709, -6.345034077120533, -6.350301449704983, -6.362907193860976, -6.363197679316302, -6.373093278222009, -6.374621964530616, -6.376650504505649, -6.38765163513552, -6.397010251862009, -6.399931707797745, -6.41546519095984, -6.4257640810415175, -6.427602712606595, -6.438380407275337, -6.455037464370616, -6.4715066482721655, -6.475155858322696, -6.486063029749504, -6.498007478172409, -6.511260019693181, -6.526627627912947, -6.533199305966481, -6.546247185975673, -6.554674128792519, -6.563026949827421, -6.571388332299256, -6.57449782310864, -6.581016412112092, -6.587590146716418, -6.592193874023802]

""" to get the probability of coefficients
dense_coefficients_prob= [np.exp(i)/(1+np.exp(i)) for i in dense_coefficients]
print ('dense_coefficients_prob=',dense_coefficients_prob)

reciprocity_coefficients_prob= [np.exp(i)/(1+np.exp(i)) for i in reciprocity_coefficients]
print ('reciprocity_coefficients_prob=',reciprocity_coefficients_prob)

total_coefficients_prob= [np.exp(i)/(1+np.exp(i)) for i in total_coefficients]
print ('total_coefficients_prob=',total_coefficients_prob)
"""
dense_coefficients_prob= [2.3837513675333815e-05, 2.369693523125213e-05, 2.3665079316210786e-05, 2.346833587270995e-05, 2.336386249341067e-05, 2.293806274395127e-05, 2.2664804478678472e-05, 2.2374234289399685e-05, 2.2143318256095686e-05, 2.1928235888468786e-05, 2.195461587862317e-05, 2.1985250735969765e-05, 2.174345580381558e-05, 2.1649787614770437e-05, 2.1664315096495982e-05, 2.1520045717150057e-05, 2.1535564682400926e-05, 2.1422242172542652e-05, 2.1336623404175006e-05, 2.1235683670928266e-05, 2.120280849352495e-05, 2.1369604516566096e-05, 2.2213038579532288e-05, 2.196417480084056e-05, 2.1554309356903823e-05, 2.10627930097055e-05, 2.0362693665144224e-05, 2.0072969906239105e-05, 1.9849486903440648e-05, 1.9170574872604277e-05, 1.8806756084201388e-05, 1.839290369222656e-05, 1.7772776539141192e-05, 1.753064883151047e-05, 1.7350514947619446e-05, 1.708356280360144e-05, 1.682726798323717e-05, 1.6567244540464967e-05, 1.630470175018598e-05, 1.6056477749206352e-05, 1.5790107081254497e-05, 1.5550705452120705e-05, 1.537707832554951e-05, 1.512032845343976e-05, 1.4761509917783208e-05, 1.4617681559897908e-05, 1.4370060324290447e-05, 1.4348005321090486e-05, 1.3640805627623857e-05, 1.3601433457094739e-05, 1.3386996491381968e-05, 1.3141279620606825e-05, 1.2948289713156497e-05, 1.2700077895605267e-05, 1.2612468945955973e-05, 1.2358314069152093e-05, 1.218542797611278e-05, 1.2093209897924912e-05, 1.2002202577655822e-05, 1.1866483656354058e-05, 1.1772188489349537e-05, 1.1667156559654601e-05, 1.142464570479438e-05]
reciprocity_coefficients_prob= [0.9882214641512129, 0.9883146461693925, 0.9882016712765482, 0.988171672835918, 0.9882118336794512, 0.988209616541385, 0.9882745069745407, 0.9884613625659858, 0.9884546845908944, 0.9885490188815667, 0.9885194729171969, 0.9885477016070228, 0.9886043589659698, 0.9886090193827979, 0.988575003349355, 0.98862372602603, 0.9884169409126313, 0.9884986802236204, 0.9884786264725387, 0.988495416183488, 0.9884812622360301, 0.9884442236455931, 0.9883225053806279, 0.988470864334294, 0.988606371862685, 0.9887947773002917, 0.9890994281675548, 0.9892161995728438, 0.989241562929049, 0.9894614735169402, 0.9896964532367039, 0.9898011720854585, 0.9900854169740215, 0.9901121181852565, 0.9901615464770326, 0.9901897566516771, 0.9903327334654782, 0.9903869405919573, 0.9905235021587936, 0.9906476533175683, 0.9907005726846022, 0.9907549481302006, 0.9908307250574346, 0.990842570567972, 0.9909662114142592, 0.9910371286962382, 0.9910929822778456, 0.9909585022241492, 0.9912587686675217, 0.9912521926943523, 0.9912953082346824, 0.9913519139142938, 0.9913651267723179, 0.9913992003963034, 0.991402189497285, 0.9914642695328605, 0.9915120486825048, 0.9915056834818935, 0.9914988812093013, 0.9915682458461069, 0.9915804402318426, 0.9916003572166973, 0.9917358698711219]
total_coefficients_prob= [0.0019960276459549064, 0.002000259149829429, 0.0019782598447284443, 0.0019568200539720965, 0.0019548290378392083, 0.0019189058791012144, 0.0019066871779590243, 0.0019130725351317707, 0.0018922595443703475, 0.0018895019834163289, 0.0018868551196835014, 0.0018941856068345306, 0.00188279620841267, 0.0018754747656581153, 0.0018710894537344136, 0.0018666894438084376, 0.0018343624019192641, 0.0018378232977546447, 0.0018272740377084972, 0.0018213252337909132, 0.00181625424646508, 0.0018245916013229172, 0.0018765100880041522, 0.0018796390909850446, 0.001866780891646337, 0.0018552579540149219, 0.0018443062134349004, 0.0018379799525544017, 0.0018218772959974281, 0.001796724336809733, 0.0018032397949471664, 0.001781892206577905, 0.0017717036726287222, 0.0017523667414666877, 0.0017431766880640271, 0.0017213781563605762, 0.0017208790540378335, 0.0017039627785349295, 0.0017013643723007583, 0.0016979224389048128, 0.0016793769393189345, 0.0016637596350915175, 0.0016589141792880675, 0.0016333863355470666, 0.0016166776532030868, 0.001613712701921087, 0.0015964416031099976, 0.0015701112385917806, 0.0015445041689021828, 0.0015388868778423068, 0.0015222185923212076, 0.001504171873413603, 0.001484398675319272, 0.0014617944949390613, 0.00145223345338829, 0.0014334349540629223, 0.0014214233314306854, 0.0014096165515630466, 0.0013978957538381225, 0.0013935618089684382, 0.0013845198318255048, 0.0013754606934145573, 0.0013691516509635395]

#[0.49995255506622255, 0.4999532111019421, 0.4999540108728779, 0.49995493013499803, 0.49995529815467676, 0.49995671651607515, 0.4999577364526567, 0.499958906869406, 0.49995975038768053, 0.4999602276997343, 0.4999600589658933, 0.49995988915831385, 0.4999607852339368, 0.4999612402616162, 0.49996124228411604, 0.4999615438916251, 0.4999617132419243, 0.4999619622316866, 0.49996224965877795, 0.49996259911388563, 0.49996286609587814, 0.4999622710365354, 0.4999591989737237, 0.49996028650408536, 0.49996196616618027, 0.4999638039256483, 0.49996632543944375, 0.49996717077378283, 0.4999678429858792, 0.49996999810091197, 0.49997115894122, 0.4999724547279503, 0.49997421043718415, 0.4999749084207815, 0.4999752421885619, 0.49997596825326135, 0.4999767927061339, 0.499977634081688, 0.4999782250157417, 0.4999789345607073, 0.49997960689411836, 0.4999802401861526, 0.4999805881926295, 0.4999811773482938, 0.49998197521016613, 0.49998222593815844, 0.49998272881042854, 0.4999827840281386, 0.49998485661061864, 0.4999849700750015, 0.49998544963958175, 0.4999859751026414, 0.49998639806634393, 0.49998694805529154, 0.4999871074478109, 0.4999877080226637, 0.49998804622453, 0.49998821791553233, 0.4999883862657267, 0.49998873960778917, 0.49998895501223417, 0.49998919740618986, 0.49998961831652494]
#m2_list = list(map(lambda x,y:x+y, dense_coefficients,reciprocity_coefficients))
#print(m2_list)
#sol_root = root(f,[0,0])
#sol_fsolve = fsolve(f,[0,0])
#print(sol_fsolve)
# 

fig = plt.figure(figsize=(11,6))
tags = []
for y in range(7, 12):
    for m in range(1, 13):
        tags.append('%02d%02d'%(y, m))
tags.append('1201')
tags.append('1202')
tags.append('1203')

N = len(tags)
x = range(N)
ax1 = fig.add_subplot(111)
L1,=ax1.plot(x, reciprocity_coefficients, 'bo',linewidth=2)
ax1.set_ylabel('Reciprocal Edge Coefficients',fontsize=18)

#L1=plt.plot(x, reciprocity_coefficients, 'ko',linewidth=2)
ax2 = ax1.twinx()  # this is the important function
#L2=plt.plot(x,  dense_coefficients, 'ko',linewidth=2)

L2,=ax2.plot(x, dense_coefficients, 'ko',linewidth=2)
ax2.set_ylabel('Edge Coefficients',fontsize=18)


L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
#plt.yticks(fontsize=20)
plt.legend( [L1,L2,L3,L4,L5,L6],['reciprocal edge coefficient','edge coefficient','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'], 
            fontsize=11,fancybox=True,shadow=True,loc='center left' )
#plt.ylabel('Average count of component',fontsize=20)
plt.title('Analytical ERGM Coefficients',fontsize=20) 
      
plt.savefig('Analytical_ERGM_Coefficients.svg',bbox_inches='tight') 
plt.show()


fig = plt.figure(figsize=(11,6))
tags = []
for y in range(7, 12):
    for m in range(1, 13):
        tags.append('%02d%02d'%(y, m))
tags.append('1201')
tags.append('1202')
tags.append('1203')

N = len(tags)
x = range(N)
ax1 = fig.add_subplot(111)
L1,=ax1.plot(x, reciprocity_coefficients_prob, 'bo',linewidth=2)
ax1.set_ylabel('Reciprocal Edge Probability',fontsize=18)

#L1=plt.plot(x, reciprocity_coefficients, 'ko',linewidth=2)
ax2 = ax1.twinx()  # this is the important function
#L2=plt.plot(x,  dense_coefficients, 'ko',linewidth=2)

L2,=ax2.plot(x, dense_coefficients_prob, 'ko',linewidth=2)
ax2.set_ylabel('Edge Probability',fontsize=18)

L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
#plt.yticks(fontsize=20)
plt.legend( [L1,L2,L3,L4,L5,L6],['reciprocal edge probability','edge probability','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'], 
            fontsize=11,fancybox=True,shadow=True,loc='center left' )
#plt.ylabel('Average count of component',fontsize=20)
plt.title('Analytical ERGM Probability',fontsize=20) 
      
plt.savefig('Analytical_ERGM_Coefficients_Probability.svg',bbox_inches='tight') 
plt.show()




plt.figure(figsize=(11,6))
N = len(tags)
x = range(N)
L1=plt.plot(x,  dense_coefficients, 'bo',linewidth=2)
L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
plt.yticks(fontsize=20)
plt.legend( ('edge coefficients','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'), 
            fontsize=15.5,fancybox=True,shadow=True, loc='best')
#plt.ylabel('Average count of component',fontsize=20)
plt.title('Analytical ERGM Edge Coefficients',fontsize=20) 
      
plt.savefig('Analytical_Edge_Coefficients_Plot.svg',bbox_inches='tight') 
plt.show()
plt.close()


plt.figure(figsize=(11,6))
tags = []
for y in range(7, 12):
    for m in range(1, 13):
        tags.append('%02d%02d'%(y, m))
tags.append('1201')
tags.append('1202')
tags.append('1203')

N = len(tags)
x = range(N)
L2=plt.plot(x,reciprocity_coefficients, 'ko',linewidth=2)
L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
plt.yticks(fontsize=20)
plt.legend( ('reciprocal edge coefficients','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'), 
            fontsize=15.5,fancybox=True,shadow=True, loc='best')
#plt.ylabel('Average count of component',fontsize=20)
plt.title('Analytical ERGM reciprocal edge Coefficients',fontsize=20) 
      
plt.savefig('Analytical_Reciprocal_Edge_Coefficients_Plot.svg',bbox_inches='tight') 
plt.show()
plt.close()
    

#plt.close()

plt.figure(figsize=(11,6))
tags = []
for y in range(7, 12):
    for m in range(1, 13):
        tags.append('%02d%02d'%(y, m))
tags.append('1201')
tags.append('1202')
tags.append('1203')

N = len(tags)
x = range(N)
L1=plt.plot(x, reciprocity_coefficients_prob, 'ko',linewidth=2)
L2=plt.plot(x,   dense_coefficients_prob, 'bo',linewidth=2)

L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
plt.yticks(fontsize=20)
plt.legend( ('reciprocal edge probability','edge probability','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'), 
            fontsize=15.5,fancybox=True,shadow=True,loc='best')
#plt.ylabel('Average count of component',fontsize=20)

plt.title('Analytical ERGM Probability',fontsize=20) 
      
plt.savefig('Analytical_ERGM_Probability.svg',bbox_inches='tight') 
plt.show()




plt.figure(figsize=(11,6))
tags = []
for y in range(7, 12):
    for m in range(1, 13):
        tags.append('%02d%02d'%(y, m))
tags.append('1201')
tags.append('1202')
tags.append('1203')

N = len(tags)
x = range(N)
L2=plt.plot(x, reciprocity_coefficients_prob, 'ko',linewidth=2)
L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
plt.yticks(fontsize=20)
plt.legend( ('reciprocal edge coefficients','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'), 
            fontsize=15.5,fancybox=True,shadow=True, loc='best')
#plt.ylabel('Average count of component',fontsize=20)
plt.title('Analytical ERGM reciprocal edge probability',fontsize=20) 
      
plt.savefig('Analytical_Reciprocal_Edge_Probability_Plot.svg',bbox_inches='tight') 
plt.show()
plt.close()


plt.figure(figsize=(11,6))
tags = []
for y in range(7, 12):
    for m in range(1, 13):
        tags.append('%02d%02d'%(y, m))
tags.append('1201')
tags.append('1202')
tags.append('1203')

N = len(tags)
x = range(N)
L2=plt.plot(x, dense_coefficients_prob, 'ko',linewidth=2)
L3=plt.axvline(x = 3, linewidth=2.2, color='k')
L4=plt.axvline(x = 20, linewidth=2.5, color='k',linestyle='dashed')
L5=plt.axvline(x = 22, linewidth=2.2, color='r')
L6=plt.axvline(x = 47, linewidth=2.5, color='r',linestyle='dashed')
xtick = np.arange(0, N, 10)
xtickLabel = []
for i in xtick:
    xtickLabel.append('20' + tags[i])     
plt.xticks(xtick, xtickLabel, rotation = 0,fontsize=18)
plt.yticks(fontsize=20)
plt.legend( ('reciprocal edge coefficients','bankruptcy of NCFC',
            'bankruptcy of LB','start of the CESP', 'end of the CESP'), 
            fontsize=15.5,fancybox=True,shadow=True,loc='best')
#plt.ylabel('Average count of component',fontsize=20)
plt.title('Analytical ERGM edge probability',fontsize=20) 
      
plt.savefig('Analytical_Edge_Probability_Plot.svg',bbox_inches='tight') 
plt.show()
plt.close()
